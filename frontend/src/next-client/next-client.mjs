// This client was generated by Platformatic from an OpenAPI specification.

// The base URL for the API. This can be overridden by calling `setBaseUrl`.
let baseUrl = ''
// The default headers to send within each request. This can be overridden by calling `setDefaultHeaders`.
let defaultHeaders = {}
// The additional parameters you want to pass to the `fetch` instance.
let defaultFetchParams = {}
const defaultJsonType = { 'Content-type': 'application/json; charset=utf-8' }

function sanitizeUrl(url) {
  if (url.endsWith('/')) { return url.slice(0, -1) } else { return url }
}
/**  @type {import('./next-client-types.d.ts').NextClient['setBaseUrl']} */
export const setBaseUrl = (newUrl) => { baseUrl = sanitizeUrl(newUrl) }

/**  @type {import('./next-client-types.d.ts').NextClient['setDefaultHeaders']} */
export const setDefaultHeaders = (headers) => { defaultHeaders = headers }

/**  @type {import('./next-client-types.d.ts').NextClient['setDefaultFetchParams']} */
export const setDefaultFetchParams = (fetchParams) => { defaultFetchParams = fetchParams }

function headersToJSON(headers) {
  const output = {}
  headers.forEach((value, key) => {
    output[key] = value
  })
  return output
}

async function _dbGetMovies (url, request) {
  const queryParameters = ['limit', 'offset', 'totalCount', 'fields', 'where.id.eq', 'where.id.neq', 'where.id.gt', 'where.id.gte', 'where.id.lt', 'where.id.lte', 'where.id.like', 'where.id.ilike', 'where.id.in', 'where.id.nin', 'where.id.contains', 'where.id.contained', 'where.id.overlaps', 'where.title.eq', 'where.title.neq', 'where.title.gt', 'where.title.gte', 'where.title.lt', 'where.title.lte', 'where.title.like', 'where.title.ilike', 'where.title.in', 'where.title.nin', 'where.title.contains', 'where.title.contained', 'where.title.overlaps', 'where.or', 'orderby.id', 'orderby.title']
  const searchParams = new URLSearchParams()
  if (request) {
    queryParameters.forEach((qp) => {
      const queryValue = request?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request?.[qp]
    })
  }

  const headers = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/db/movies/?${searchParams.toString()}`, {
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbGetMovies']} */
export const dbGetMovies = async (request) => {
  return await _dbGetMovies(baseUrl, request)
}
async function _dbCreateMovie (url, request) {
  const body = request
  const isFormData = body instanceof FormData
  const headers = {
    ...defaultHeaders,
    ...(isFormData ? {} : defaultJsonType)
  }

  const response = await fetch(`${url}/db/movies/`, {
    method: 'POST',
    body: isFormData ? body : JSON.stringify(body),
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbCreateMovie']} */
export const dbCreateMovie = async (request) => {
  return await _dbCreateMovie(baseUrl, request)
}
async function _dbUpdateMovies (url, request) {
  const queryParameters = ['fields', 'where.id.eq', 'where.id.neq', 'where.id.gt', 'where.id.gte', 'where.id.lt', 'where.id.lte', 'where.id.like', 'where.id.ilike', 'where.id.in', 'where.id.nin', 'where.id.contains', 'where.id.contained', 'where.id.overlaps', 'where.title.eq', 'where.title.neq', 'where.title.gt', 'where.title.gte', 'where.title.lt', 'where.title.lte', 'where.title.like', 'where.title.ilike', 'where.title.in', 'where.title.nin', 'where.title.contains', 'where.title.contained', 'where.title.overlaps', 'where.or']
  const searchParams = new URLSearchParams()
  if (request) {
    queryParameters.forEach((qp) => {
      const queryValue = request?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request?.[qp]
    })
  }

  const body = request
  const isFormData = body instanceof FormData
  const headers = {
    ...defaultHeaders,
    ...(isFormData ? {} : defaultJsonType)
  }

  const response = await fetch(`${url}/db/movies/?${searchParams.toString()}`, {
    method: 'PUT',
    body: isFormData ? body : JSON.stringify(body),
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbUpdateMovies']} */
export const dbUpdateMovies = async (request) => {
  return await _dbUpdateMovies(baseUrl, request)
}
async function _dbGetMovieById (url, request) {
  const queryParameters = ['fields']
  const searchParams = new URLSearchParams()
  if (request) {
    queryParameters.forEach((qp) => {
      const queryValue = request?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request?.[qp]
    })
  }

  const headers = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/db/movies/${request['id']}?${searchParams.toString()}`, {
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbGetMovieById']} */
export const dbGetMovieById = async (request) => {
  return await _dbGetMovieById(baseUrl, request)
}
async function _dbUpdateMovie (url, request) {
  const queryParameters = ['fields']
  const searchParams = new URLSearchParams()
  if (request) {
    queryParameters.forEach((qp) => {
      const queryValue = request?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request?.[qp]
    })
  }

  const body = request
  const isFormData = body instanceof FormData
  const headers = {
    ...defaultHeaders,
    ...(isFormData ? {} : defaultJsonType)
  }

  const response = await fetch(`${url}/db/movies/${request['id']}?${searchParams.toString()}`, {
    method: 'PUT',
    body: isFormData ? body : JSON.stringify(body),
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbUpdateMovie']} */
export const dbUpdateMovie = async (request) => {
  return await _dbUpdateMovie(baseUrl, request)
}
async function _dbDeleteMovies (url, request) {
  const queryParameters = ['fields']
  const searchParams = new URLSearchParams()
  if (request) {
    queryParameters.forEach((qp) => {
      const queryValue = request?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request?.[qp]
    })
  }

  const body = request
  const isFormData = body instanceof FormData
  const headers = {
    ...defaultHeaders,
    ...(isFormData ? {} : defaultJsonType)
  }

  const response = await fetch(`${url}/db/movies/${request['id']}?${searchParams.toString()}`, {
    method: 'DELETE',
    body: isFormData ? body : JSON.stringify(body),
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbDeleteMovies']} */
export const dbDeleteMovies = async (request) => {
  return await _dbDeleteMovies(baseUrl, request)
}
async function _dbGetUsers (url, request) {
  const queryParameters = ['limit', 'offset', 'totalCount', 'fields', 'where.id.eq', 'where.id.neq', 'where.id.gt', 'where.id.gte', 'where.id.lt', 'where.id.lte', 'where.id.like', 'where.id.ilike', 'where.id.in', 'where.id.nin', 'where.id.contains', 'where.id.contained', 'where.id.overlaps', 'where.name.eq', 'where.name.neq', 'where.name.gt', 'where.name.gte', 'where.name.lt', 'where.name.lte', 'where.name.like', 'where.name.ilike', 'where.name.in', 'where.name.nin', 'where.name.contains', 'where.name.contained', 'where.name.overlaps', 'where.or', 'orderby.id', 'orderby.name']
  const searchParams = new URLSearchParams()
  if (request) {
    queryParameters.forEach((qp) => {
      const queryValue = request?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request?.[qp]
    })
  }

  const headers = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/db/users/?${searchParams.toString()}`, {
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbGetUsers']} */
export const dbGetUsers = async (request) => {
  return await _dbGetUsers(baseUrl, request)
}
async function _dbCreateUser (url, request) {
  const body = request
  const isFormData = body instanceof FormData
  const headers = {
    ...defaultHeaders,
    ...(isFormData ? {} : defaultJsonType)
  }

  const response = await fetch(`${url}/db/users/`, {
    method: 'POST',
    body: isFormData ? body : JSON.stringify(body),
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbCreateUser']} */
export const dbCreateUser = async (request) => {
  return await _dbCreateUser(baseUrl, request)
}
async function _dbUpdateUsers (url, request) {
  const queryParameters = ['fields', 'where.id.eq', 'where.id.neq', 'where.id.gt', 'where.id.gte', 'where.id.lt', 'where.id.lte', 'where.id.like', 'where.id.ilike', 'where.id.in', 'where.id.nin', 'where.id.contains', 'where.id.contained', 'where.id.overlaps', 'where.name.eq', 'where.name.neq', 'where.name.gt', 'where.name.gte', 'where.name.lt', 'where.name.lte', 'where.name.like', 'where.name.ilike', 'where.name.in', 'where.name.nin', 'where.name.contains', 'where.name.contained', 'where.name.overlaps', 'where.or']
  const searchParams = new URLSearchParams()
  if (request) {
    queryParameters.forEach((qp) => {
      const queryValue = request?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request?.[qp]
    })
  }

  const body = request
  const isFormData = body instanceof FormData
  const headers = {
    ...defaultHeaders,
    ...(isFormData ? {} : defaultJsonType)
  }

  const response = await fetch(`${url}/db/users/?${searchParams.toString()}`, {
    method: 'PUT',
    body: isFormData ? body : JSON.stringify(body),
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbUpdateUsers']} */
export const dbUpdateUsers = async (request) => {
  return await _dbUpdateUsers(baseUrl, request)
}
async function _dbGetUserById (url, request) {
  const queryParameters = ['fields']
  const searchParams = new URLSearchParams()
  if (request) {
    queryParameters.forEach((qp) => {
      const queryValue = request?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request?.[qp]
    })
  }

  const headers = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/db/users/${request['id']}?${searchParams.toString()}`, {
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbGetUserById']} */
export const dbGetUserById = async (request) => {
  return await _dbGetUserById(baseUrl, request)
}
async function _dbUpdateUser (url, request) {
  const queryParameters = ['fields']
  const searchParams = new URLSearchParams()
  if (request) {
    queryParameters.forEach((qp) => {
      const queryValue = request?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request?.[qp]
    })
  }

  const body = request
  const isFormData = body instanceof FormData
  const headers = {
    ...defaultHeaders,
    ...(isFormData ? {} : defaultJsonType)
  }

  const response = await fetch(`${url}/db/users/${request['id']}?${searchParams.toString()}`, {
    method: 'PUT',
    body: isFormData ? body : JSON.stringify(body),
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbUpdateUser']} */
export const dbUpdateUser = async (request) => {
  return await _dbUpdateUser(baseUrl, request)
}
async function _dbDeleteUsers (url, request) {
  const queryParameters = ['fields']
  const searchParams = new URLSearchParams()
  if (request) {
    queryParameters.forEach((qp) => {
      const queryValue = request?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request?.[qp]
    })
  }

  const body = request
  const isFormData = body instanceof FormData
  const headers = {
    ...defaultHeaders,
    ...(isFormData ? {} : defaultJsonType)
  }

  const response = await fetch(`${url}/db/users/${request['id']}?${searchParams.toString()}`, {
    method: 'DELETE',
    body: isFormData ? body : JSON.stringify(body),
    headers,
    ...defaultFetchParams
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./next-client-types.d.ts').NextClient['dbDeleteUsers']} */
export const dbDeleteUsers = async (request) => {
  return await _dbDeleteUsers(baseUrl, request)
}
async function _getDbExample (url, request) {
  const headers = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/db/example`, {
    headers,
    ...defaultFetchParams
  })

  const textResponses = [200]
  if (textResponses.includes(response.status)) {
    return {
      statusCode: response.status,
      headers: headersToJSON(response.headers),
      body: await response.text()
    }
  }
  const responseType = response.headers.get('content-type')?.startsWith('application/json') ? 'json' : 'text'
  return {
    statusCode: response.status,
    headers: headersToJSON(response.headers),
    body: await response[responseType]()
  }
}

/**  @type {import('./next-client-types.d.ts').NextClient['getDbExample']} */
export const getDbExample = async (request) => {
  return await _getDbExample(baseUrl, request)
}
export default function build (url, options) {
  url = sanitizeUrl(url)
  if (options?.headers) {
    defaultHeaders = options.headers
  }
  return {
    dbGetMovies: _dbGetMovies.bind(url, ...arguments),
    dbCreateMovie: _dbCreateMovie.bind(url, ...arguments),
    dbUpdateMovies: _dbUpdateMovies.bind(url, ...arguments),
    dbGetMovieById: _dbGetMovieById.bind(url, ...arguments),
    dbUpdateMovie: _dbUpdateMovie.bind(url, ...arguments),
    dbDeleteMovies: _dbDeleteMovies.bind(url, ...arguments),
    dbGetUsers: _dbGetUsers.bind(url, ...arguments),
    dbCreateUser: _dbCreateUser.bind(url, ...arguments),
    dbUpdateUsers: _dbUpdateUsers.bind(url, ...arguments),
    dbGetUserById: _dbGetUserById.bind(url, ...arguments),
    dbUpdateUser: _dbUpdateUser.bind(url, ...arguments),
    dbDeleteUsers: _dbDeleteUsers.bind(url, ...arguments),
    getDbExample: _getDbExample.bind(url, ...arguments)
  }
}